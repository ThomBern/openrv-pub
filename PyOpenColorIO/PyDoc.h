
/* DO NOT EDIT THIS FILE - it is machine generated */

#include <OpenColorIO/OpenColorIO.h>

OCIO_NAMESPACE_ENTER
{

const char EXCEPTION__DOC__[164] = "An exception class to throw for errors detected at runtime.\n    \n    .. warning::\n       All functions in the Config class can potentially throw this exception.";

const char EXCEPTIONMISSINGFILE__DOC__[294] = "An exception class for errors detected at runtime, thrown when OCIO cannot\n    find a file that is expected to exist. This is provided as a custom type to\n    distinguish cases where one wants to continue looking for missing files,\n    but wants to properly fail for other error conditions.";

const char OPENCOLORIO__DOC__[16] = "OpenColorIO API";
const char OPENCOLORIO_CLEARALLCACHES__DOC__[1] = "";
const char OPENCOLORIO_GETCURRENTCONFIG__DOC__[1] = "";
const char OPENCOLORIO_GETLOGGINGLEVEL__DOC__[1] = "";
const char OPENCOLORIO_SETCURRENTCONFIG__DOC__[1] = "";
const char OPENCOLORIO_SETLOGGINGLEVEL__DOC__[1] = "";

const char CONSTANTS__DOC__[1] = "";
const char CONSTANTS_BITDEPTHISFLOAT__DOC__[84] = "BitDepthIsFloat(bitDepth)\n        \n        :param s:\n        :param type: string";
const char CONSTANTS_BITDEPTHTOINT__DOC__[82] = "BitDepthToInt(bitDepth)\n        \n        :param s:\n        :param type: string";
const char CONSTANTS_COMBINETRANSFORMDIRECTIONS__DOC__[147] = "CombineTransformDirections(dir1, dir2)\n        \n        :param s1:\n        :param type: string\n        :param s2:\n        :param type: string";
const char CONSTANTS_GETINVERSETRANSFORMDIRECTION__DOC__[98] = "GetInverseTransformDirection(direction)\n        \n        :param s:\n        :param type: string";

const char CONFIG__DOC__[7] = "Config";
const char CONFIG_CREATEFROMENV__DOC__[172] = "CreateFromEnv()\n        \n        Create a :py:class:`PyOpenColorIO.Config` object using the environment variable.\n                     \n        :returns: Config object";
const char CONFIG_CREATEFROMFILE__DOC__[239] = "CreateFromFile(filename)\n        \n        Create a :py:class:`PyOpenColorIO.Config` object using the information in a file.\n        \n        :param filename: name of file\n        :type filename: string\n        :return: Config object";
const char CONFIG_CREATEFROMSTREAM__DOC__[1] = "";
const char CONFIG_ADDCOLORSPACE__DOC__[342] = "addColorSpace(pyColorSpace)\n        \n        Add a specified color space to :py:class:`PyOpenColorIO.Config`.\n        \n        :param pyColorSpace: color space\n        :type pyColorSpace: object\n        \n        .. note::\n           If another color space is already registered with the same name,\n           this will overwrite it.";
const char CONFIG_ADDDISPLAY__DOC__[330] = "addDisplay(display, view, colorSpaceName[, looks])\n        \n        NEEDS WORK\n        \n        :param display:\n        :type display: string\n        :param view: \n        :type view: string\n        :param colorSpaceName: \n        :type colorSpaceName: string\n        :param looks: optional\n        :type looks: string";
const char CONFIG_ADDENVIRONMENTVAR__DOC__[1] = "";
const char CONFIG_ADDLOOK__DOC__[158] = "addLook(pylook)\n        \n        Adds a look to :py:class:`PyOpenColorIO.Config`.\n        \n        :param pylook: look\n        :type pylook: look object";
const char CONFIG_CLEARCOLORSPACES__DOC__[98] = "clearColorSpaces()\n        \n        Clear the color spaces in :py:class:`PyOpenColorIO.Config`.";
const char CONFIG_CLEARDISPLAYS__DOC__[16] = "clearDisplays()";
const char CONFIG_CLEARENVIRONMENTVARS__DOC__[1] = "";
const char CONFIG_CLEARLOOKS__DOC__[81] = "clearLooks()\n        \n        Clear looks in :py:class:`PyOpenColorIO.Config`.";
const char CONFIG_CREATEEDITABLECOPY__DOC__[211] = "createEditableCopy()\n        \n        Returns an editable copy of :py:class:`PyOpenColorIO.Config`.\n        \n        :return: editable copy of :py:class:`PyOpenColorIO.Config`\n        :rtype: Config object";
const char CONFIG_GETACTIVEDISPLAYS__DOC__[172] = "getActiveDisplays()\n        \n        Returns the active displays in :py:class:`PyOpenColorIO.Config`.\n        \n        :return: active displays\n        :rtype: string";
const char CONFIG_GETACTIVEVIEWS__DOC__[163] = "getActiveViews()\n        \n        Returns the active views in :py:class:`PyOpenColorIO.Config`.\n        \n        :return: active views\n        :rtype: string";
const char CONFIG_GETCACHEID__DOC__[910] = "getCacheID([, pycontext])\n        \n        This will produce a hash of the all colorspace definitions, etc.\n        \n        All external references, such as files used in FileTransforms, etc.,\n        will be incorporated into the cacheID. While the contents of the files\n        are not read, the file system is queried for relavent information\n        (mtime, inode) so that the :py:class:`PyOpenColorIO.Config`'s cacheID\n        will change when the underlying luts are updated.\n        \n        If a context is not provided, the current Context will be used. If a\n        null context is provided, file references will not be taken into\n        account (this is essentially a hash of :py:meth:`PyOpenColorIO.Config.serialize`).\n           \n        :param pycontext: optional\n        :type pycontext: object\n        :return: hash of :py:class:`PyOpenColorIO.Config`\n        :rtype: string";
const char CONFIG_GETCOLORSPACE__DOC__[366] = "getColorSpace(name)\n        \n        Returns the data for the specified color space in :py:class:`PyOpenColorIO.Config`.\n        \n        This will return null if the specified name is not found.\n        \n        :param name: name of color space\n        :type name: string\n        :return: data for specified color space\n        :rtype: pyColorSpace object";
const char CONFIG_GETCOLORSPACENAMEBYINDEX__DOC__[1] = "";
const char CONFIG_GETCOLORSPACES__DOC__[211] = "getColorSpaces()\n        \n        Returns all the ColorSpaces defined in :py:class:`PyOpenColorIO.Config`.\n           \n        :return: ColorSpaces in :py:class:`PyOpenColorIO.Config`\n        :rtype: tuple";
const char CONFIG_GETCURRENTCONTEXT__DOC__[260] = "getCurrentContext()\n        \n        Return the current context, which is essentially a record of all\n        the environment variables that are available for use in file path\n        lookups.\n        \n        :return: context\n        :rtype: pycontext";
const char CONFIG_GETDEFAULTDISPLAY__DOC__[177] = "getDefaultDisplay()\n        \n        Returns the default display set in :py:class:`PyOpenColorIO.Config`.\n        \n        :return: default display\n        :rtype: string ";
const char CONFIG_GETDEFAULTLUMACOEFS__DOC__[197] = "getDefaultLumaCoefs()\n        \n        Returns the default luma coefficients in :py:class:`PyOpenColorIO.Config`.\n           \n        :return: luma coefficients\n        :rtype: list of floats";
const char CONFIG_GETDEFAULTVIEW__DOC__[231] = "getDefaultView(display)\n        \n        Returns the default view of :py:class:`PyOpenColorIO.Config`.\n        \n        :param display: default view\n        :type display: string\n        :return: view\n        :rtype: string";
const char CONFIG_GETDESCRIPTION__DOC__[214] = "getDescription()\n        \n        Returns the stored description of :py:class:`PyOpenColorIO.Config`.\n           \n        :return: stored description of :py:class:`PyOpenColorIO.Config`\n        :rtype: string";
const char CONFIG_GETDISPLAY__DOC__[1] = "";
const char CONFIG_GETDISPLAYCOLORSPACENAME__DOC__[379] = "getDisplayColorSpaceName(display, view)\n        \n        Returns the ColorSpace name corresponding to the display and view\n        combination in :py:class:`PyOpenColorIO.Config`.\n        \n        :param display: display\n        :type display: string\n        :param view: view\n        :type view: string\n        :return: display color space name\n        :rtype: string";
const char CONFIG_GETDISPLAYLOOKS__DOC__[341] = "getDisplayLooks(display, view)\n        \n        Returns the looks corresponding to the display and view combination in\n        :py:class:`PyOpenColorIO.Config`.\n        \n        :param display: display\n        :type display: string\n        :param view: view\n        :type view: string\n        :return: looks\n        :rtype: string";
const char CONFIG_GETDISPLAYS__DOC__[209] = "getDisplays()\n        \n        Returns all the displays defined in :py:class:`PyOpenColorIO.Config`.\n        \n        :return: displays in :py:class:`PyOpenColorIO.Config`\n        :rtype: list of strings";
const char CONFIG_GETENVIRONMENTVARDEFAULT__DOC__[1] = "";
const char CONFIG_GETENVIRONMENTVARDEFAULTS__DOC__[1] = "";
const char CONFIG_GETENVIRONMENTVARNAMEBYINDEX__DOC__[1] = "";
const char CONFIG_GETINDEXFORCOLORSPACE__DOC__[1] = "";
const char CONFIG_GETLOOK__DOC__[247] = "getLook(str)\n        \n        Returns the information of a specified look in\n        :py:class:`PyOpenColorIO.Config`.\n        \n        :param str: look\n        :type str: string\n        :return: specified look\n        :rtype: look object";
const char CONFIG_GETLOOKNAMEBYINDEX__DOC__[1] = "";
const char CONFIG_GETLOOKS__DOC__[189] = "getLooks()\n        \n        Returns a list of all the looks defined in\n        :py:class:`PyOpenColorIO.Config`.\n        \n        :return: looks\n        :rtype: tuple of look objects";
const char CONFIG_GETNUMCOLORSPACES__DOC__[1] = "";
const char CONFIG_GETNUMDISPLAYS__DOC__[1] = "";
const char CONFIG_GETNUMENVIRONMENTVARS__DOC__[1] = "";
const char CONFIG_GETNUMLOOKS__DOC__[1] = "";
const char CONFIG_GETNUMROLES__DOC__[1] = "";
const char CONFIG_GETNUMVIEWS__DOC__[1] = "";
const char CONFIG_GETPROCESSOR__DOC__[1854] = "getProcessor(arg1[, arg2[, direction[, context]])\n        \n        Returns a processor for a specified transform.\n        \n        Although this is not often needed, it allows for the reuse of atomic\n        OCIO functionality, such as applying an individual LUT file.\n        \n        There are two canonical ways of creating a\n        :py:class:`PyOpenColorIO.Processor`:\n        \n        #. Pass a transform into arg1, in which case arg2 will be ignored. \n        #. Set arg1 as the source and arg2 as the destination. These can be\n           ColorSpace names, objects, or roles.\n        \n        Both arguments, ``direction`` (of transform) and ``context``, are\n        optional and respected for both methods of\n        :py:class:`PyOpenColorIO.Processor` creation.\n        \n        This will fail if either the source or destination color space is null.\n        \n        See Python: Processor for more details.\n        \n        .. note::\n            This may provide higher fidelity than anticipated due to internal\n            optimizations. For example, if inputColorSpace and outputColorSpace\n            are members of the same family, no conversion will be applied, even\n            though, strictly speaking, quantization should be added.\n            \n            If you wish to test these calls for quantization characteristics,\n            apply in two steps; the image must contain RGB triples (though\n            arbitrary numbers of additional channels can be optionally\n            supported using the pixelStrideBytes arg). ???\n        \n        :param arg1: \n        :type arg1: object\n        :param arg2: ignored if arg1 is a transform\n        :type arg2: object\n        :param direction: optional\n        :type direction: string\n        :param context: optional\n        :type context: object";
const char CONFIG_GETROLENAME__DOC__[1] = "";
const char CONFIG_GETSEARCHPATH__DOC__[124] = "getSearchPath()\n        \n        Returns the search path.\n        \n        :return: search path\n        :rtype: string";
const char CONFIG_GETVIEW__DOC__[1] = "";
const char CONFIG_GETVIEWS__DOC__[306] = "getViews(display)\n        \n        Returns all the views defined in :py:class:`PyOpenColorIO.Config`.\n        \n        :param display: views in :py:class:`PyOpenColorIO.Config`\n        :type display: string\n        :return: views in :py:class:`PyOpenColorIO.Config`.\n        :rtype: list of strings";
const char CONFIG_GETWORKINGDIR__DOC__[145] = "getWorkingDir()\n        \n        Returns the working directory.\n        \n        :return: the working directory\n        :rtype path: string";
const char CONFIG_HASROLE__DOC__[1] = "";
const char CONFIG_ISEDITABLE__DOC__[542] = "isEditable()\n        \n        Returns whether Config is editable.\n        \n        The configurations returned from\n        :py:func:`PyOpenColorIO.GetCurrentConfig` are not editable, and if\n        you want to edit them you can use\n        :py:meth:`PyOpenColorIO.Config.createEditableCopy`.\n           \n        If you attempt to call any of the set functions on a noneditable\n        Config, an exception will be thrown.\n           \n        :return: state of :py:class:`PyOpenColorIO.Config`'s editability\n        :rtype: bool";
const char CONFIG_ISSTRICTPARSINGENABLED__DOC__[1] = "";
const char CONFIG_PARSECOLORSPACEFROMSTRING__DOC__[563] = "parseColorSpaceFromString(str)\n        \n        Parses out the color space from a string.\n        \n        Given the specified string, gets the longest, right-most color space substring.\n        * If strict parsing is enabled, and no color space is found, return an empty string.\n        * If strict parsing is disabled, return the default role, if defined.\n        * If the default role is not defined, return an empty string.\n        \n        :param str: ColorSpace data\n        :type str: string\n        :return: parsed data\n        :rtype: string";
const char CONFIG_SANITYCHECK__DOC__[218] = "sanityCheck()\n        \n        This will throw an exception if :py:class:`PyOpenColorIO.Config` is\n        malformed. The most common error occurs when references are made to\n        colorspaces that do not exist.";
const char CONFIG_SERIALIZE__DOC__[310] = "serialize()\n        \n        Returns the string representation of :py:class:`PyOpenColorIO.Config`\n        in YAML text form. This is typically stored on disk in a file with the\n        .ocio extension.\n        \n        :return: :py:class:`PyOpenColorIO.Config` in YAML text form\n        :rtype: string";
const char CONFIG_SETACTIVEDISPLAYS__DOC__[193] = "setActiveDisplays(displays)\n        \n        Sets the active displays in :py:class:`PyOpenColorIO.Config`.\n        \n        :param displays: active displays\n        :type displays: string";
const char CONFIG_SETACTIVEVIEWS__DOC__[175] = "setActiveViews(views)\n        \n        Sets the active views in :py:class:`PyOpenColorIO.Config`.\n        \n        :param views: active views\n        :type views: string";
const char CONFIG_SETDEFAULTLUMACOEFS__DOC__[201] = "setDefaultLumaCoefs(pyCoef)\n        \n        Sets the default luma coefficients in :py:class:`PyOpenColorIO.Config`.\n        \n        :param pyCoef: luma coefficients\n        :type pyCoef: object";
const char CONFIG_SETDESCRIPTION__DOC__[206] = "setDescription(desc)\n        \n        Sets the description of :py:class:`PyOpenColorIO.Config`.\n        \n        :param desc: description of :py:class:`PyOpenColorIO.Config`\n        :type desc: string";
const char CONFIG_SETROLE__DOC__[312] = "setRole(role, csname)\n        \n        Set a role's ColorSpace.\n        \n        Setting the colorSpaceName name to a null string unsets it.\n        \n        :param role: role whose ColorSpace will be set\n        :type role: string\n        :param csname: name of ColorSpace\n        :type csname: string";
const char CONFIG_SETSEARCHPATH__DOC__[137] = "setSearchPath(path)\n        \n        Sets the search path.\n        \n        :param path: the search path\n        :type path: string";
const char CONFIG_SETSTRICTPARSINGENABLED__DOC__[1] = "";
const char CONFIG_SETWORKINGDIR__DOC__[149] = "setWorkingDir(path)\n        \n        Sets the working directory.\n        \n        :param path: the working directory\n        :type path: string";

const char COLORSPACE__DOC__[917] = "A color space is the state of an image in terms of colorimetry and color\n    encoding. I.e., it defines how an image's color information needs to be\n    interpreted.\n    \n    Transforming images between different color spaces is the primary\n    motivation for the OCIO library.\n    \n    While a complete discussion of color spaces is beyond the scope of this\n    documentation, traditional uses would be to have color spaces describing\n    image capture devices, such as cameras and scanners, and internal\n    'convenience' spaces, such as scene-linear and logarithmic.\n    \n    Color spaces are specific to a particular image precision\n    (float32, uint8, etc.). The set of color spaces that provide equivalent\n    mappings (at different precisions) are referred to as a 'family'.\n    \n    .. code-block:: python\n        \n        import PyOpenColorIO as OCIO\n        config = OCIO.Config()\n    ";
const char COLORSPACE_CREATEEDITABLECOPY__DOC__[1] = "";
const char COLORSPACE_GETALLOCATION__DOC__[191] = "If this colorspace needs to be transferred to a limited dynamic\n        range coding space (such as during display with a GPU path), use this\n        allocation to maximize bit efficiency.";
const char COLORSPACE_GETALLOCATIONVARS__DOC__[1] = "";
const char COLORSPACE_GETBITDEPTH__DOC__[1] = "";
const char COLORSPACE_GETDESCRIPTION__DOC__[1] = "";
const char COLORSPACE_GETEQUALITYGROUP__DOC__[1] = "";
const char COLORSPACE_GETFAMILY__DOC__[1] = "";
const char COLORSPACE_GETNAME__DOC__[1] = "";
const char COLORSPACE_GETTRANSFORM__DOC__[1] = "";
const char COLORSPACE_ISDATA__DOC__[495] = "ColorSpaces that are data are treated a bit special. Basically, any\n        colorspace transforms you try to apply to them are ignored. (Think\n        of applying a gamut mapping transform to an ID pass). Also, the\n        :py:class:`PyOpenColorIO.DisplayTransform` process obeys special\n        'data min' and 'data max' args.\n        \n        This is traditionally used for pixel data that represents non-color\n        pixel data, such as normals, point positions, ID information, etc.";
const char COLORSPACE_ISEDITABLE__DOC__[1] = "";
const char COLORSPACE_SETALLOCATION__DOC__[1] = "";
const char COLORSPACE_SETALLOCATIONVARS__DOC__[1] = "";
const char COLORSPACE_SETBITDEPTH__DOC__[1] = "";
const char COLORSPACE_SETDESCRIPTION__DOC__[1] = "";
const char COLORSPACE_SETEQUALITYGROUP__DOC__[1] = "";
const char COLORSPACE_SETFAMILY__DOC__[1] = "";
const char COLORSPACE_SETISDATA__DOC__[1] = "";
const char COLORSPACE_SETNAME__DOC__[1] = "";
const char COLORSPACE_SETTRANSFORM__DOC__[1] = "";

const char PROCESSOR__DOC__[298] = "Processor is the baked representation of a particular color transform.\n    Once you have a process for a particular transform created, you can hang\n    onto it to efficiently transform pixels.\n    \n    Processors can only be created from the `PyOpenColorIO.Config`\n    getProcessor(...) call.";
const char PROCESSOR_APPLYRGB__DOC__[318] = "applyRGB(pixeldata)\n        \n        Apply the RGB part of the transform represented by\n        :py:class:`PyOpenColorIO.Processor` to an image.\n        \n        :param pixeldata: rgbrgb... array (length % 3 == 0)\n        :type pixeldata: object\n        :return: color converted pixeldata\n        :rtype: list";
const char PROCESSOR_APPLYRGBA__DOC__[331] = "applyRGBA(pixeldata)\n        \n        Apply the RGB and alpha part of the transform represented by\n        :py:class:`PyOpenColorIO.Processor` to an image.\n        \n        :param pixeldata: rgbargba... array (length % 4 == 0)\n        :type pixeldata: object\n        :return: color converted pixeldata\n        :rtype: list";
const char PROCESSOR_GETCPUCACHEID__DOC__[195] = "getCpuCacheID()\n        \n        Returns the cache ID of the CPU that :py:class:`PyOpenColorIO.Processor`\n        will run on.\n        \n        :return: CPU cache ID\n        :rtype: string";
const char PROCESSOR_GETGPULUT3D__DOC__[236] = "getGpuLut3D(shaderDesc)\n        \n        Returns the GPU LUT 3D.\n        \n        :param shaderDesc: define 'language','functionName','lut3DEdgeLen'\n        :type shaderDesc: dict\n        :return: GPU LUT 3D\n        :rtype: list";
const char PROCESSOR_GETGPULUT3DCACHEID__DOC__[226] = "getGpuLut3DCacheID(shaderDesc)\n        \n        Returns the GPU 3D LUT cache ID.\n        \n        :param shaderDesc: two params\n        :type shaderDesc: dict\n        :return: GPU 3D LUT cache ID\n        :rtype: string";
const char PROCESSOR_GETGPUSHADERTEXT__DOC__[253] = "getGpuShaderText(shaderDesc)\n        \n        Returns the GPU shader text.\n        \n        :param shaderDesc: define 'language','functionName','lut3DEdgeLen'\n        :type shaderDesc: dict\n        :return: GPU shader text\n        :rtype: string";
const char PROCESSOR_GETGPUSHADERTEXTCACHEID__DOC__[278] = "getGpuShaderTextCacheID(shaderDesc)\n        \n        Returns the GPU shader text cache ID.\n        \n        :param shaderDesc: define 'language','functionName','lut3DEdgeLen'\n        :type shaderDesc: dict\n        :return: GPU shader text cache ID\n        :rtype: string";
const char PROCESSOR_GETMETADATA__DOC__[201] = "getMetadata()\n        \n        Returns information about the process that generated this processor. \n        \n        :return: processor metadata\n        :rtype: `PyOpenColorIO.ProcessorMetadata`";
const char PROCESSOR_HASCHANNELCROSSTALK__DOC__[275] = "hasChannelCrosstalk()\n        \n        Returns whether the transformation of\n        :py:class:`PyOpenColorIO.Processor` introduces crosstalk between the\n        image channels.\n        \n        :return: whether there's crosstalk between channels\n        :rtype: bool";
const char PROCESSOR_ISNOOP__DOC__[221] = "isNoOp()\n        \n        Returns whether the actual transformation represented by\n        :py:class:`PyOpenColorIO.Processor` is a no-op.\n        \n        :return: whether transform is a no-op\n        :rtype: bool";

const char PROCESSORMETADATA__DOC__[193] = "ProcessorMetadata\n    \n    This contains meta information about the process that generated\n    this processor.  The results of these functions do not\n    impact the pixel processing.\n    ";
const char PROCESSORMETADATA_GETFILES__DOC__[166] = "getFiles()\n        \n        Returns a list of file references used internally by this processor\n        \n        :return: list of filenames\n        :rtype: list";
const char PROCESSORMETADATA_GETLOOKS__DOC__[157] = "getLooks()\n        \n        Returns a list of looks used internally by this processor\n        \n        :return: list of look names\n        :rtype: list";

const char CONTEXT__DOC__[8] = "Context";
const char CONTEXT_CLEARSTRINGVARS__DOC__[1] = "";
const char CONTEXT_CREATEEDITABLECOPY__DOC__[1] = "";
const char CONTEXT_GETCACHEID__DOC__[1] = "";
const char CONTEXT_GETENVIRONMENTMODE__DOC__[1] = "";
const char CONTEXT_GETNUMSTRINGVARS__DOC__[1] = "";
const char CONTEXT_GETSEARCHPATH__DOC__[1] = "";
const char CONTEXT_GETSTRINGVAR__DOC__[1] = "";
const char CONTEXT_GETSTRINGVARNAMEBYINDEX__DOC__[1] = "";
const char CONTEXT_GETWORKINGDIR__DOC__[1] = "";
const char CONTEXT_ISEDITABLE__DOC__[1] = "";
const char CONTEXT_LOADENVIRONMENT__DOC__[1] = "";
const char CONTEXT_RESOLVEFILELOCATION__DOC__[1] = "";
const char CONTEXT_RESOLVESTRINGVAR__DOC__[1] = "";
const char CONTEXT_SETENVIRONMENTMODE__DOC__[1] = "";
const char CONTEXT_SETSEARCHPATH__DOC__[1] = "";
const char CONTEXT_SETSTRINGVAR__DOC__[1] = "";
const char CONTEXT_SETWORKINGDIR__DOC__[1] = "";

const char LOOK__DOC__[197] = "The *Look* is an 'artistic' image modification, in a specified image state.\n    \n    The processSpace defines the ColorSpace the image is required to be in, for\n    the math to apply correctly.";
const char LOOK_CREATEEDITABLECOPY__DOC__[1] = "";
const char LOOK_GETDESCRIPTION__DOC__[1] = "";
const char LOOK_GETINVERSETRANSFORM__DOC__[1] = "";
const char LOOK_GETNAME__DOC__[1] = "";
const char LOOK_GETPROCESSSPACE__DOC__[1] = "";
const char LOOK_GETTRANSFORM__DOC__[1] = "";
const char LOOK_ISEDITABLE__DOC__[1] = "";
const char LOOK_SETDESCRIPTION__DOC__[1] = "";
const char LOOK_SETINVERSETRANSFORM__DOC__[1] = "";
const char LOOK_SETNAME__DOC__[1] = "";
const char LOOK_SETPROCESSSPACE__DOC__[1] = "";
const char LOOK_SETTRANSFORM__DOC__[1] = "";

const char GPUSHADERDESC__DOC__[14] = "GpuShaderDesc";
const char GPUSHADERDESC_GETCACHEID__DOC__[1] = "";
const char GPUSHADERDESC_GETFUNCTIONNAME__DOC__[1] = "";
const char GPUSHADERDESC_GETLANGUAGE__DOC__[1] = "";
const char GPUSHADERDESC_GETLUT3DEDGELEN__DOC__[1] = "";
const char GPUSHADERDESC_SETFUNCTIONNAME__DOC__[1] = "";
const char GPUSHADERDESC_SETLANGUAGE__DOC__[1] = "";
const char GPUSHADERDESC_SETLUT3DEDGELEN__DOC__[1] = "";

const char BAKER__DOC__[6] = "Baker";
const char BAKER_BAKE__DOC__[1] = "";
const char BAKER_CREATEEDITABLECOPY__DOC__[1] = "";
const char BAKER_GETCONFIG__DOC__[1] = "";
const char BAKER_GETCUBESIZE__DOC__[1] = "";
const char BAKER_GETFORMAT__DOC__[1] = "";
const char BAKER_GETFORMATEXTENSIONBYINDEX__DOC__[1] = "";
const char BAKER_GETFORMATNAMEBYINDEX__DOC__[1] = "";
const char BAKER_GETINPUTSPACE__DOC__[1] = "";
const char BAKER_GETLOOKS__DOC__[1] = "";
const char BAKER_GETMETADATA__DOC__[1] = "";
const char BAKER_GETNUMFORMATS__DOC__[1] = "";
const char BAKER_GETSHAPERSIZE__DOC__[1] = "";
const char BAKER_GETSHAPERSPACE__DOC__[1] = "";
const char BAKER_GETTARGETSPACE__DOC__[1] = "";
const char BAKER_GETTYPE__DOC__[1] = "";
const char BAKER_ISEDITABLE__DOC__[1] = "";
const char BAKER_SETCONFIG__DOC__[1] = "";
const char BAKER_SETCUBESIZE__DOC__[1] = "";
const char BAKER_SETFORMAT__DOC__[1] = "";
const char BAKER_SETINPUTSPACE__DOC__[1] = "";
const char BAKER_SETLOOKS__DOC__[1] = "";
const char BAKER_SETMETADATA__DOC__[1] = "";
const char BAKER_SETSHAPERSIZE__DOC__[1] = "";
const char BAKER_SETSHAPERSPACE__DOC__[1] = "";
const char BAKER_SETTARGETSPACE__DOC__[1] = "";
const char BAKER_SETTYPE__DOC__[1] = "";

const char TRANSFORM__DOC__[78] = "These are typically only needed when creating or manipulating configurations.";
const char TRANSFORM_CREATEEDITABLECOPY__DOC__[1] = "";
const char TRANSFORM_GETDIRECTION__DOC__[1] = "";
const char TRANSFORM_ISEDITABLE__DOC__[1] = "";
const char TRANSFORM_SETDIRECTION__DOC__[1] = "";


const char ALLOCATIONTRANSFORM__DOC__[136] = "Respans the 'expanded' range into the specified (often compressed) range.\n    \n    Performs both squeeze (offset) and log transforms.";
const char ALLOCATIONTRANSFORM_GETALLOCATION__DOC__[203] = "getAllocation()\n        \n        Returns the allocation specified in the transform. Allocation is an\n        enum, defined in Constants.\n        \n        :return: Allocation\n        :rtype: string";
const char ALLOCATIONTRANSFORM_GETNUMVARS__DOC__[1] = "";
const char ALLOCATIONTRANSFORM_GETVARS__DOC__[165] = "getVars()\n        \n        Returns the allocation values specified in the transform.\n        \n        :return: allocation values\n        :rtype: list of floats";
const char ALLOCATIONTRANSFORM_SETALLOCATION__DOC__[157] = "setAllocation(hwalloc)\n        \n        Sets the allocation of the transform.\n        \n        :param hwalloc: Allocation\n        :type hwalloc: object";
const char ALLOCATIONTRANSFORM_SETVARS__DOC__[152] = "setVars(pyvars)\n        \n        Sets the allocation in the transform.\n        \n        :param pyvars: list of floats\n        :type pyvars: object";

const char CDLTRANSFORM__DOC__[13] = "CDLTransform";
const char CDLTRANSFORM_CREATEFROMFILE__DOC__[1] = "";
const char CDLTRANSFORM_EQUALS__DOC__[1] = "";
const char CDLTRANSFORM_GETDESCRIPTION__DOC__[167] = "getDescription()\n        \n        Returns the description of :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :return: description\n        :rtype: string";
const char CDLTRANSFORM_GETID__DOC__[142] = "getID()\n        \n        Returns the ID from :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :return: ID\n        :rtype: string";
const char CDLTRANSFORM_GETOFFSET__DOC__[1] = "";
const char CDLTRANSFORM_GETPOWER__DOC__[1] = "";
const char CDLTRANSFORM_GETSOP__DOC__[1] = "";
const char CDLTRANSFORM_GETSAT__DOC__[1] = "";
const char CDLTRANSFORM_GETSATLUMACOEFS__DOC__[230] = "getSatLumaCoefs(pyData)\n        \n        Returns the SAT (saturation) and luma coefficients in :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :return: saturation and luma coefficients\n        :rtype: list of floats";
const char CDLTRANSFORM_GETSLOPE__DOC__[1] = "";
const char CDLTRANSFORM_GETXML__DOC__[1] = "";
const char CDLTRANSFORM_SETDESCRIPTION__DOC__[173] = "setDescription(str)\n        \n        Sets the description of :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :param str: description\n        :type str: string";
const char CDLTRANSFORM_SETID__DOC__[146] = "setID(str)\n        \n        Sets the ID in :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :param str: ID\n        :type str: string";
const char CDLTRANSFORM_SETOFFSET__DOC__[199] = "setOffset(pyData)\n        \n        Sets the offset ('O' part of SOP) in :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :param pyData: list of three floats\n        :type pyData: object";
const char CDLTRANSFORM_SETPOWER__DOC__[197] = "setPower(pyData)\n        \n        Sets the power ('P' part of SOP) in :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :param pyData: list of three floats\n        :type pyData: object";
const char CDLTRANSFORM_SETSOP__DOC__[170] = "setSOP(pyData)\n        \n        Sets SOP in :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :param pyData: list of nine floats\n        :type pyData: object";
const char CDLTRANSFORM_SETSAT__DOC__[173] = "setSAT(pyData)\n        \n        Sets SAT (saturation) in :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :param pyData: saturation\n        :type pyData: float";
const char CDLTRANSFORM_SETSLOPE__DOC__[177] = "setSlope(pyData)\n        \n        Sets the slope ('S' part of SOP) in :py:class:`PyOpenColorIO.CDLTransform`.\n        \n        :param pyData: \n        :type pyData: object";
const char CDLTRANSFORM_SETXML__DOC__[1] = "";

const char COLORSPACETRANSFORM__DOC__[20] = "ColorSpaceTransform";
const char COLORSPACETRANSFORM_GETDST__DOC__[157] = "getDst()\n        \n        Returns the name of the destination ColorSpace in this transform.\n        \n        :return: ColorSpace\n        :rtype: string";
const char COLORSPACETRANSFORM_GETSRC__DOC__[152] = "getSrc()\n        \n        Returns the name of the source ColorSpace in this transform.\n        \n        :return: ColorSpace\n        :rtype: string";
const char COLORSPACETRANSFORM_SETDST__DOC__[167] = "setDst(dstname)\n        \n        Sets the destination ColorSpace in this transform.\n        \n        :param str: destination ColorSpace\n        :type str: string";
const char COLORSPACETRANSFORM_SETSRC__DOC__[157] = "setSrc(srcname)\n        \n        Sets the source ColorSpace in this transform.\n        \n        :param str: source ColorSpace\n        :type str: string";

const char DISPLAYTRANSFORM__DOC__[40] = "Used to create transforms for displays.";
const char DISPLAYTRANSFORM_GETCHANNELVIEW__DOC__[182] = "getChannelView()\n        \n        Returns the channel view of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :return: channel view\n        :rtype: object";
const char DISPLAYTRANSFORM_GETCOLORTIMINGCC__DOC__[210] = "getColorTimingCC()\n        \n        Returns the color timing CC transform of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :return: color timing CC transform\n        :rtype: object";
const char DISPLAYTRANSFORM_GETDISPLAY__DOC__[168] = "getDisplay()\n        \n        Returns the display of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :return: display\n        :rtype: string";
const char DISPLAYTRANSFORM_GETDISPLAYCC__DOC__[186] = "getDisplayCC()\n        \n        Returns the display CC transform of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :return: display CC\n        :rtype: object";
const char DISPLAYTRANSFORM_GETINPUTCOLORSPACENAME__DOC__[218] = "getInputColorSpaceName()\n        \n        Returns the name of the input ColorSpace of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :return: name of input ColorSpace\n        :rtype: string";
const char DISPLAYTRANSFORM_GETLINEARCC__DOC__[193] = "getLinearCC()\n        \n        Returns the linear CC transform of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :return: linear CC transform\n        :rtype: object";
const char DISPLAYTRANSFORM_GETLOOKSOVERRIDE__DOC__[232] = "getLooksOverride()\n        \n        Returns the looks in :py:class:`PyOpenColorIO.DisplayTransform` that's\n        overriding :py:class:`PyOpenColorIO.Config`'s.\n        \n        :return: looks override\n        :rtype: string";
const char DISPLAYTRANSFORM_GETLOOKSOVERRIDEENABLED__DOC__[221] = "getLooksOverrideEnabled()\n        \n        Returns whether the looks override of\n        :py:class:`PyOpenColorIO.DisplayTransform` is enabled.\n        \n        :return: looks override enabling\n        :rtype: bool";
const char DISPLAYTRANSFORM_GETVIEW__DOC__[159] = "getView()\n        \n        Returns the view of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :return: view\n        :rtype: string";
const char DISPLAYTRANSFORM_SETCHANNELVIEW__DOC__[211] = "setChannelView(pyCC)\n        \n        Sets the channel view transform of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param pyCC: channel view transform\n        :type pyCC: object";
const char DISPLAYTRANSFORM_SETCOLORTIMINGCC__DOC__[209] = "setColorTimingCC(pyCC)\n        \n        Sets the color timing CC transform of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param pyCC: color timing CC\n        :type pyCC: object";
const char DISPLAYTRANSFORM_SETDISPLAY__DOC__[174] = "setDisplay(str)\n        \n        Sets the display of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param str: display\n        :type str: string";
const char DISPLAYTRANSFORM_SETDISPLAYCC__DOC__[195] = "setDisplayCC(pyCC)\n        \n        Sets the display CC transform of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param pyCC: display CC\n        :type pyCC: object";
const char DISPLAYTRANSFORM_SETINPUTCOLORSPACENAME__DOC__[227] = "setInputColorSpaceName(name)\n        \n        Sets the name of the input ColorSpace of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param name: name of input ColorSpace\n        :type name: string";
const char DISPLAYTRANSFORM_SETLINEARCC__DOC__[192] = "setLinearCC(pyCC)\n        \n        Sets the linear CC transform of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param pyCC: linear CC\n        :type pyCC: object";
const char DISPLAYTRANSFORM_SETLOOKSOVERRIDE__DOC__[185] = "setLooksOverride(str)\n        \n        Sets the looks override of :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param str: looks override\n        :type str: string";
const char DISPLAYTRANSFORM_SETLOOKSOVERRIDEENABLED__DOC__[231] = "setLooksOverrideEnabled(enabled)\n        \n        Sets the looks override enabling of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param enabled: looks override enabling\n        :type enabled: object";
const char DISPLAYTRANSFORM_SETVIEW__DOC__[165] = "setView(str)\n        \n        Sets the view of\n        :py:class:`PyOpenColorIO.DisplayTransform`.\n        \n        :param str: view\n        :type str: string";

const char EXPONENTTRANSFORM__DOC__[18] = "ExponentTransform";
const char EXPONENTTRANSFORM_GETVALUE__DOC__[218] = "getValue()\n        \n        Returns the values in the exponent transform of\n        :py:class:`PyOpenColorIO.ExponentTransform`.\n        \n        :return: exponent transform values\n        :rtype: list of floats";
const char EXPONENTTRANSFORM_SETVALUE__DOC__[229] = "setValue()\n        \n        Sets the values in the exponent transform of\n        :py:class:`PyOpenColorIO.ExponentTransform`.\n        \n        :param pyData: exponent transform values\n        :type pyData: list of 4 floats";

const char FILETRANSFORM__DOC__[14] = "FileTransform";
const char FILETRANSFORM_GETCCCID__DOC__[1] = "";
const char FILETRANSFORM_GETFORMATEXTENSIONBYINDEX__DOC__[1] = "";
const char FILETRANSFORM_GETFORMATNAMEBYINDEX__DOC__[1] = "";
const char FILETRANSFORM_GETINTERPOLATION__DOC__[1] = "";
const char FILETRANSFORM_GETNUMFORMATS__DOC__[1] = "";
const char FILETRANSFORM_GETSRC__DOC__[1] = "";
const char FILETRANSFORM_SETCCCID__DOC__[1] = "";
const char FILETRANSFORM_SETINTERPOLATION__DOC__[1] = "";
const char FILETRANSFORM_SETSRC__DOC__[1] = "";

const char GROUPTRANSFORM__DOC__[15] = "GroupTransform";
const char GROUPTRANSFORM_CLEAR__DOC__[1] = "";
const char GROUPTRANSFORM_EMPTY__DOC__[1] = "";
const char GROUPTRANSFORM_GETTRANSFORM__DOC__[1] = "";
const char GROUPTRANSFORM_GETTRANSFORMS__DOC__[1] = "";
const char GROUPTRANSFORM_PUSH_BACK__DOC__[1] = "";
const char GROUPTRANSFORM_SETTRANSFORMS__DOC__[1] = "";
const char GROUPTRANSFORM_SIZE__DOC__[1] = "";

const char LOGTRANSFORM__DOC__[13] = "LogTransform";
const char LOGTRANSFORM_GETBASE__DOC__[89] = "getBase()\n        \n        Returns the base of :py:class:`PyOpenColorIO.LogTransform`.";
const char LOGTRANSFORM_SETBASE__DOC__[171] = "setBase(base)\n        \n        Sets the base in :py:class:`PyOpenColorIO.LogTransform`.\n        \n        :param base: base of log transform\n        :type base: float";

const char LOOKTRANSFORM__DOC__[14] = "LookTransform";
const char LOOKTRANSFORM_GETDST__DOC__[1] = "";
const char LOOKTRANSFORM_GETLOOKS__DOC__[1] = "";
const char LOOKTRANSFORM_GETSRC__DOC__[1] = "";
const char LOOKTRANSFORM_SETDST__DOC__[1] = "";
const char LOOKTRANSFORM_SETLOOKS__DOC__[1] = "";
const char LOOKTRANSFORM_SETSRC__DOC__[1] = "";

const char MATRIXTRANSFORM__DOC__[15] = "MatrixTransfom";
const char MATRIXTRANSFORM_FIT__DOC__[1] = "";
const char MATRIXTRANSFORM_IDENTITY__DOC__[1] = "";
const char MATRIXTRANSFORM_SAT__DOC__[1] = "";
const char MATRIXTRANSFORM_SCALE__DOC__[1] = "";
const char MATRIXTRANSFORM_VIEW__DOC__[1] = "";
const char MATRIXTRANSFORM_EQUALS__DOC__[1] = "";
const char MATRIXTRANSFORM_GETMATRIX__DOC__[1] = "";
const char MATRIXTRANSFORM_GETOFFSET__DOC__[1] = "";
const char MATRIXTRANSFORM_GETVALUE__DOC__[1] = "";
const char MATRIXTRANSFORM_SETMATRIX__DOC__[1] = "";
const char MATRIXTRANSFORM_SETOFFSET__DOC__[1] = "";
const char MATRIXTRANSFORM_SETVALUE__DOC__[1] = "";


}
OCIO_NAMESPACE_EXIT

